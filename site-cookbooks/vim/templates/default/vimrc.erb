set nocompatible

silent! source $MY_VIMRUNTIME/pluginjp/encode.vim

set nowritebackup
set nobackup

set clipboard+=unnamed

set nrformats-=octal

set timeoutlen=3500

set hidden

set history=200

set formatoptions+=mM

set virtualedit=block

set whichwrap=b,s,[,],<,>

set backspace=indent,eol,start

set ambiwidth=double

set wildmenu

filetype plugin indent on


set ignorecase
set smartcase

set wrapscan

set incsearch

set hlsearch


set noerrorbells

set novisualbell

set visualbell t_vb=

set shellslash

set number

set showmatch matchtime=1

set autoindent

set cinoptions+=:0

set title

set cmdheight=2
set laststatus=2

set showcmd

set display=lastline

set list
set listchars=tab:^\ ,trail:~

if &t_Co > 2 || has('gui_running')
  syntax on
endif

if has('iconv')
  set statusline=%<%f\ %m\ %r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=[0x%{FencB()}]\ (%v,%l)/%L%8P\ 
else
  set statusline=%<%f\ %m\ %r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=\ (%v,%l)/%L%8P\ 
endif

function! FencB()
  let c = matchstr(getline('.'), '.', col('.') - 1)
  let c = iconv(c, &enc, &fenc)
  return s:Byte2hex(s:Str2byte(c))
endfunction

function! s:Str2byte(str)
  return map(range(len(a:str)), 'char2nr(a:str[v:val])')
endfunction

function! s:Byte2hex(bytes)
  return join(map(copy(a:bytes), 'printf("%02X", v:val)'), '')
endfunction

nnoremap <F1> K

nnoremap <F8> :source %<CR>

nnoremap ZZ <Nop>

nnoremap <Down> gj
nnoremap <Up>   gk
nnoremap h <Left>
nnoremap j gj
nnoremap k gk
nnoremap l <Right>

if has('folding')
  nnoremap <expr> l foldlevel(line('.')) ? "\<Right>zo" : "\<Right>"
endif

augroup vimrcEx
  autocmd!
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line('$') |
    \   exe "normal! g`\"" |
    \ endif
augroup END

let g:hi_insert = 'highlight StatusLine guifg=darkblue guibg=darkyellow gui=none ctermfg=blue ctermbg=yellow cterm=none'

if has('syntax')
  augroup InsertHook
    autocmd!
    autocmd InsertEnter * call s:StatusLine('Enter')
    autocmd InsertLeave * call s:StatusLine('Leave')
  augroup END
endif

let s:slhlcmd = ''
function! s:StatusLine(mode)
  if a:mode == 'Enter'
    silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
    silent exec g:hi_insert
  else
    highlight clear StatusLine
    silent exec s:slhlcmd
    redraw
  endif
endfunction

function! s:GetHighlight(hi)
  redir => hl
  exec 'highlight '.a:hi
  redir END
  let hl = substitute(hl, '[\r\n]', '', 'g')
  let hl = substitute(hl, 'xxx', '', '')
  return hl
endfunction

function! ZenkakuSpace()
  silent! let hi = s:GetHighlight('ZenkakuSpace')
  if hi =~ 'E411' || hi =~ 'cleared$'
    highlight ZenkakuSpace cterm=underline ctermfg=darkgrey gui=underline guifg=darkgrey
  endif
endfunction
if has('syntax')
  augroup ZenkakuSpace
    autocmd!
    autocmd ColorScheme       * call ZenkakuSpace()
    autocmd VimEnter,WinEnter * match ZenkakuSpace /ã€€/
  augroup END
  call ZenkakuSpace()
endif

" JavaScript
autocmd filetype javascript :set tabstop=2 shiftwidth=2 expandtab
autocmd BufNewFile,BufRead *.js :set ft=javascript fenc=utf-8
autocmd BufNewFile,BufRead *.json :set ft=javascript fenc=utf-8

" PHP
autocmd filetype php :set tabstop=4 shiftwidth=4

" Twig
autocmd filetype htmljinja :set ts=2 sw=2
autocmd BufNewFile,BufRead *.twig :set ft=htmljinja fenc=utf-8

" ctp
autocmd filetype htmljinja :set ts=2 sw=2
autocmd BufNewFile,BufRead *.ctp :set ft=php fenc=utf-8

" ruby
autocmd filetype ruby :set ts=2 sw=2 expandtab
autocmd BufNewFile,BufRead *.rb :set ft=ruby fenc=utf-8

